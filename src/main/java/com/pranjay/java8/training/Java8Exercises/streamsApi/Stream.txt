The Stream API is used to process collections of objects.
A stream is a sequence of objects that supports various methods
which can be pipelined to produce the desired result

The features of Java stream are –

1.	A stream is not a data structure instead it takes input from the Collections,
	Arrays or I/O channels.
2.	Streams don’t change the original data structure, they only provide the result
	as per the pipelined methods.
3.	Each intermediate operation is lazily executed and returns a stream as a result,
	hence various intermediate operations can be pipelined.
	Terminal operations mark the end of the stream and return the result.
	
Intermediate Operations:

1.	map: The map method is used to returns a stream consisting of the results of applying
	the given function to the elements of this stream.
	List number = Arrays.asList(2,3,4,5);
	List square = number.stream().map(x->x*x).collect(Collectors.toList());

2.	filter: The filter method is used to select elements as per the Predicate
	passed as argument.
	List names = Arrays.asList("Reflection","Collection","Stream");
	List result = names.stream().filter(s->s.startsWith("S")).collect(Collectors.toList());

3.	sorted: The sorted method is used to sort the stream.
	List names = Arrays.asList("Reflection","Collection","Stream");
	List result = names.stream().sorted().collect(Collectors.toList());
	
	
UseFull Methods:
Collect()	The collect() method of Stream class can be used to accumulate elements of 
			any Stream into a Collection.
			Used to convert stream to Collections(List/Set/Map)
